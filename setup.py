# Project RoboOrchard
#
# Copyright (c) 2024 Horizon Robotics. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

import os
import subprocess
import warnings

from foxglove_schemas_protobuf.PoseInFrame_pb2 import PoseInFrame
from foxglove_schemas_protobuf.Quaternion_pb2 import Quaternion
from foxglove_schemas_protobuf.Vector3_pb2 import Vector3
from robo_orchard_build.ext.build_ext import RoboOrchardBuildExt
from robo_orchard_build.ext.protobuf import ProtocolExtension
from robo_orchard_build.utils.file import scan_folder
from setuptools import setup

PROJECT_NAME = "robo_orchard_schemas"
PYTHON_BASE_DIR = os.path.abspath(os.path.dirname(__file__))

LICENSE_HEADER = """# Project RoboOrchard
#
# Copyright (c) 2024-2025 Horizon Robotics. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
"""


class VersionPostfixNotExist(Exception):
    pass


def get_version() -> str:
    with open(os.path.join(PYTHON_BASE_DIR, "VERSION"), "r") as fp:
        base_version = fp.read().strip()

    def get_full_version(
        version_postfix_path, throw_if_not_exist: bool = True
    ) -> str:
        if os.path.exists(version_postfix_path):
            with open(version_postfix_path, "r") as fp:
                post_fix = fp.read().strip()
            return f"{base_version}{post_fix}"
        elif throw_if_not_exist:
            raise VersionPostfixNotExist(
                "VERSION_POSTFIX file not found! please call `make version` first"  # noqa: E501
            )
        else:
            warnings.warn(
                "VERSION_POSTFIX file not found! using base version only",
                UserWarning,
            )
            return base_version

    # generate git hash
    try:
        repo_git_hash = subprocess.check_output(
            "git log -1 --pretty=format:%h".split()
        ).decode()
    except subprocess.CalledProcessError:
        # if git command fails, use a placeholder
        warnings.warn(
            "Failed to get git hash, using 'unknown' as placeholder",
            UserWarning,
        )
        repo_git_hash = "unknown"

    version_postfix_path = os.path.join(PYTHON_BASE_DIR, "VERSION_POSTFIX")

    try:
        full_version = get_full_version(version_postfix_path)
    except VersionPostfixNotExist:
        # if VERSION_POSTFIX file not found, check the parent directory
        version_postfix_path = os.path.join(
            os.path.dirname(PYTHON_BASE_DIR), "VERSION_POSTFIX"
        )
        try:
            full_version = get_full_version(version_postfix_path)
        except VersionPostfixNotExist:
            # if still not found, use base version only
            warnings.warn(
                "VERSION_POSTFIX file not found in both current and parent directories! "  # noqa: E501
                "try to using base version.",
                UserWarning,
            )
            full_version = f"{base_version}.dev+{repo_git_hash}"

    with open(
        os.path.join(PYTHON_BASE_DIR, PROJECT_NAME, "version.py"), "w"
    ) as fp:  # noqa: E501
        fp.write(LICENSE_HEADER + "\n")
        fp.write(
            '"""This file is auto-generated by setup.py, do not edit it!"""\n\n'  # noqa: E501
        )
        fp.write(f'__version__ = "{base_version}"\n')
        fp.write(f'__full_version__ = "{full_version}"\n')
        fp.write(f'__git_hash__ = "{repo_git_hash}"\n')

    return full_version


if __name__ == "__main__":
    schema_dir = "./schemas/proto"

    setup(
        version=get_version(),
        ext_modules=[
            ProtocolExtension(
                name="robo_orchard_schemas",
                proto_files=list(
                    scan_folder(
                        folder=schema_dir,
                        ending="proto",
                        recursive=True,
                        list_folders=False,
                    )
                ),
                output_dir=PYTHON_BASE_DIR,
                import_dirs=[schema_dir],
                dependencies=[Vector3, Quaternion, PoseInFrame],
                package_name_mapping={"foxglove": "foxglove_schemas_protobuf"},
            )
        ],
        cmdclass={
            "build_ext": RoboOrchardBuildExt,
        },
    )
